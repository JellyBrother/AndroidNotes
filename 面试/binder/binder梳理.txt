### binder能传递几种数据：
binder传递数据的方法protected boolean onTransact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException {
* 能传递普通类型的少量数据；
* binder对象/handle(struct flat_binder_object);
* fd(struct binder_fd_object)；由于Binder内存映射的空间最大只允许4M，binder的两个进程间需要传输大量的数据时就只能使用传递文件句柄fd方式。例如：图像声音数据、或者是一个对象。
https://mp.weixin.qq.com/s/S7lGxGZApgqFTuRCMIKhJA

### bingder设计：服务端aidl提供给客户端调用，但是客户端是主线程还是子线程调用是未知的，这时候服务端要怎么设计？
* 可以参考AMS的通信。
* 客户端ActivityThread拥有内部类H extends Handler接受服务端消息更新。
* 客户端ActivityThread拥有内部类ApplicationThread extends IApplicationThread.Stub，接口传递给服务端调用，ApplicationThread调用H发送消息。
* 这里就体现了这种设计，不管服务端子线程还是主线程，我客户端都是主线程刷新。服务端是子线程，就子线程发消息，服务端是主线程就主线程发消息。
* 客户端在Handler接收消息切换到了主线程，接下来客户端想主线程或者子线程运行都可以。

### aidl通信要注意哪些点？ 
https://blog.csdn.net/sgl1990_07/article/details/129651171
https://mp.weixin.qq.com/s/YF5K8UVPQJ3upPHS0kc8dg
* 设计良好的接口：AIDL 接口是跨进程通信的核心，设计良好的接口是使用 AIDL 的基础。在设计接口时，应该充分考虑应用场景和数据类型，尽量避免使用过于复杂的数据结构，以及避免过多地依赖于其他模块。接口设计应该尽可能地简单明了，易于理解和使用。
* 数据类型选择：AIDL 支持的数据类型有限，因此在选择数据类型时应该充分考虑数据大小和传输效率。对于大型数据结构，建议使用流式传输方式；对于简单数据类型，可以直接在 AIDL 接口中定义。
AIDL只支持基本数据类型、ArrayList、HashMap、序列化对象、AIDL接口。
数据流向：in客户端流向服务端，out服务端流向客户端，inout双向流动。如果参数对象是可变的，就需要控制了，避免不必要的数据拷贝和传输。
Binder对传输数据大小有限制，不能超过1M，如果需要传输，可以使用ParcelFileDescriptor。
* 线程安全：AIDL 采用的是 Binder 机制，因此跨进程调用时需要考虑线程安全。在 AIDL 接口实现中，需要避免使用共享变量和非线程安全的数据结构，保证数据的正确性和可靠性。
可以参考AMS设计，使用Handler收发消息。
* 异常处理：在使用 AIDL 进行跨进程通信时，应该尽可能地捕获异常，并及时处理。在 AIDL 接口实现中，应该尽量减少出现异常的可能性，同时对于可能出现的异常，应该进行充分的处理和容错。
* 性能优化：AIDL 的性能受到多种因素的影响，因此在使用 AIDL 进行跨进程通信时，需要进行性能优化。比如可以采用流式传输方式，使用更加高效的数据结构，避免频繁地跨进程调用等。
不要在主线程中调用 AIDL 接口，而是使用子线程或者异步任务来进行 IPC。
不要在 onServiceConnected () 或者 onServiceDisconnected () 中直接操作服务端方法，因为这些方法是在主线程中执行的。
使用oneway键字来修饰 AIDL 接口，使得 IPC 调用变成非阻塞的，oneway能将远程调用改为异步调用。
* 版本兼容性：在进行 AIDL 接口的升级时，需要注意版本兼容性。为了保证兼容性，可以在 AIDL 接口定义中使用新旧版本共存的方式，同时在 AIDL 接口实现中进行版本判断和兼容处理。
增接口需要做版本判断，类似于安卓版本判断。
* 安全性：AIDL 跨进程通信存在一定的安全风险，因此在使用 AIDL 进行跨进程通信时，需要进行安全性设计和防范。比如可以对 AIDL 接口进行权限限制，使用加密算法保证数据的安全性等。

### oneway简介
* oneway主要有以下两个特性：
将远程调用改为「异步调用」，使得远程调用变成非阻塞式的，客户端不需要等待服务端的处理，只是发送数据并立即返回。
`oneway` 修饰方法，在同一个IBinder对象调用中，会按照调用顺序依次执行。
* 注意事项： https://www.jianshu.com/p/4c8d346185cb
`oneway` 修饰本地调用没有效果，仍然是同步的，「客户端」需要等待「服务端」的处理。
本地调用是指「客户端」和「服务端」在同一个进程中，不需要进行 IPC 通信，而是直接调用 AIDL 接口的方法。这种情况下，因为没有进程间的数据传输和序列化/反序列化的过程，因为跨进程序列化会有阻塞的问题。
本地调用也要注意接口本身很复杂执行的耗时，这个时候还是可能阻塞通信。
`oneway` 不能用于修饰有返回值的方法，或者抛出异常，因为「客户端」无法接收到这些信息。
同一个IBinder对象进行oneway调用，这些调用会按照原始调用的顺序依次执行。不同的IBinder对象可能导致调用顺序和执行顺序不一致。
`oneway` 要谨慎用于修饰调用极其频繁的IPC接口












