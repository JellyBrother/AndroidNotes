### 解释
内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。
内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。

### 内存异常环境搭建
* 内存异常会生成.hprof的文件
* 这个文件可以用Android studio打开去查看，但是不方便，而且卡。
- View-Tool Windows-Profiler
* 用MemoryAnalyzer分析
* 将.hprof重命名为source.hprof
* 双击hprof-conv.bat生成target.hprof文件。//双击报错的话，需要配置hprof-conv.bat里面的代码。
* 用MemoryAnalyzer打开target.hprof文件
* 在Histogram进行分析
Class Name 当前类
Objects 当前类在内存中有多少个对象
Shallow Heap 浅层堆，当前类实际占用的堆大小。
Retained Heap 保留堆，是指当前类被回收时垃圾回收器应该回收的内存的大小。
* 右键的List objects
with outgoing references 内部持有哪些对象
with incoming references 被哪些对象持有


### 之前处理的经验-不一定是内存溢出的经验
* 用异常捕获
* 放子线程

### 自己的经验
* 内部类耗时操作，长时间持有外部类对象。
* 静态引用，导致生命周期很长，无法及时回收。
- Callback、Handler、Listener、new对象
* 网络，IO，队列。
* 排查new 对象是否是内部类，内部类是否耗时操作。
- 在销毁的时候及时remove，解绑，置空
- 将对象设为静态内部类。
* 排查上下文this、Activity、Context是否被静态引用，是否长期持有。
- 需要用application的上下文

### java引用
* 强引用（StrongReference）：类似 Object obj = new Object(); 的代码创建的引用，这种引用的特点是其指向的对象无论如何都不会被 JVM 的垃圾回收器（Garbage Collector）回收（即使是面临着发生 OutOfMemoryError 异常的风险）。
* 软引用（SoftReference）：这种引用的功能即是前言部分提到的：如果某个 Java 对象只被软引用所指向，那么在 JVM 要新建一个对象的时候，如果当前虚拟机所剩下的堆内存不足以保存这个要新建的对象的时候（即虚拟机将要抛出 OutOfMemoryError 异常的时候），那么 JVM 会发起一次垃圾回收（gc）动作，将堆中所 只被非强引用 指向的对象回收，以提供更多的可用内存来新建这个对象，如果经过垃圾回收动作之后虚拟机的堆内存中仍然没有足够的可用空间来创建这个对象，那么虚拟机将抛出一个 OutOfMemoryError 异常。
* 弱引用（WeakReference）：和软引用类似，但是弱引用的引用强度更弱一点，上文说到：只被软引用指向的对象会在 JVM 在新建对象并且其可用的堆内存不足以保存这个对象时会被垃圾回收器回收。即当 JVM 在新建一个对象并且第一次面临着抛出 OutOfMemoryError 异常时会被垃圾回收器回收。而对于只被弱引用指向的对象来说，其只能存活到下一次 JVM 执行垃圾回收动作之前。也就是说：JVM 的每一次垃圾回收动作都会回收那些只被弱引用指向的对象。
* 虚引用（PhantomReference）：引用强度最弱的引用，这种引用有点特殊：被虚引用完全不会引用其所指向的对象的生命周期，也就是说一个 Java 对象是否被回收和指向它的虚引用完全没有任何关系。也不能通过虚引用来得到其指向的对象（其 get 方法直接返回 null）。那么虚引用有什么作用呢？虚引用一般会配合 引用队列（ReferenceQueue）来使用。当某个被虚引用指向的对象被回收时，我们可以在其引用队列中得到这个虚引用的对象作为其所指向的对象被回收的一个通知。我们将会在后面看到这种用法。

### 为什么remove可以避免内存溢出，而有些没用remove的方法就需要静态内部类。
* 类A有一个内部类B，B有一个管理者C，A操作C来回调B。A持有B和C，C持有B，B持有A。一旦C长期存在（除了被A持有，还可能被其他对象持有），导致A和B都释放不了。
在A销毁的时候，对B置空，但是无法对C置空，造成B不能及时回收。因为置空只是把栈里面的对象应用去掉，而对象在堆里面，只要还有其他地方引用，就不会被销毁。
需要全部置空才能回收B，所以C进行remove操作，就是在c里面去掉B的引用。B被回收了，A才能被回收。
* 当没有remove方法的时候，使用静态内部类B，让B弱引用A，去掉了B强持有A，从而A也能及时被回收。

### 为什么要用静态的内部类？不用可以吗？
* 非static的内部类会持有外部类的引用，当这个内部类被长期持有的时候，就必须静态。由于static的内部类，使用的时候不需要外部类的实例，所以static的内部类和外部类是没有联系的。
例如Handler，若此时你的handler的消息队列中有未处理的Message，在Activity finish之后，Message仍然存在，那么Handler也仍然存在。由于Handler中有Context的引用，那么Context也就存在。而该Context就是我们的Activity，也就是Activity依然存在，那么我们便是发生了内存泄露。
例如上面的管理类C，C持有内部类B，C被多个类持有，或者C本身是静态的，就会发生内存泄漏。
* 如果能避免上面的情况，就可以非静态。
- 对内部类的调用方实行弱引用。
- 创建内部类的地方用静态。
WeakReference<Activity> ref = new WeakReference<Activity>(this);
Activity activity = ref.get();












